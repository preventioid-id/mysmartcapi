# Nginx configuration for SmartCAPI Backend
# Acts as a reverse proxy for the FastAPI application

# Define the user that will run the Nginx worker processes
user nginx;

# Set the number of worker processes to the optimal number (auto-detects CPU cores)
worker_processes auto;

# Specify the file for storing the process ID
pid /var/run/nginx.pid;

# Configure the error log
error_log /var/log/nginx/error.log warn;

# Events block: Configures connection processing
events {
    # Set the maximum number of simultaneous connections that can be opened by a worker process
    worker_connections 1024;
}

# HTTP block: Contains all HTTP server configurations
http {
    # Include the file that maps file extensions to MIME types
    include /etc/nginx/mime.types;
    
    # Define the default MIME type if a file's extension is not found in the 'mime.types' file
    default_type application/octet-stream;

    # Define a custom log format for access logs
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    # Set the location for access logs using the 'main' format
    access_log /var/log/nginx/access.log main;

    # Enable the sendfile() system call for efficient file transfers
    sendfile on;

    # Optimize TCP packet sending
    tcp_nopush on;

    # Set the timeout for keep-alive connections with the client
    keepalive_timeout 65;

    # Enable gzip compression to reduce the size of transmitted data
    gzip on;

    # Specify which MIME types should be compressed
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Server block: Defines a virtual server
    server {
        # Listen on port 80 for HTTP connections
        listen 80;
        
        # Set the domain name for this server. 'localhost' is fine for Docker setups.
        server_name localhost;

        # Increase the maximum allowed size for the client request body.
        # This is crucial for uploading large audio files.
        client_max_body_size 100M;

        # Location block for handling all standard HTTP requests
        location / {
            # Forward the request to the FastAPI application running in the 'backend' service on port 8000
            proxy_pass http://backend:8000;

            # Set headers to pass information about the original request to the backend
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Location block specifically for WebSocket connections
        # WebSocket connections require special proxy settings
        location /ws/ {
            # Forward the request to the FastAPI application
            proxy_pass http://backend:8000;

            # These headers are essential for the WebSocket upgrade handshake
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            # Set headers to pass information about the original request
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Location block for serving static files directly from Nginx
        # This is more efficient than routing static file requests through the FastAPI app
        location /static/ {
            # Map the URL /static/ to the /app/static/ directory inside the Docker container
            alias /app/static/;

            # Set caching headers for static files to improve performance
            expires 30d;
            add_header Cache-Control "public, immutable";
        }
    }
}